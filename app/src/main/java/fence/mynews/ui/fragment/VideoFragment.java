package fence.mynews.ui.fragment;import android.os.Bundle;import android.os.Handler;import android.os.Message;import android.support.annotation.Nullable;import android.view.View;import android.widget.ListView;import android.widget.TextView;import android.widget.Toast;import com.handmark.pulltorefresh.library.PullToRefreshBase;import com.handmark.pulltorefresh.library.PullToRefreshListView;import java.util.ArrayList;import fence.mynews.R;import fence.mynews.model.entity.Channel;import fence.mynews.model.entity.VideoResp;import fence.mynews.ui.adapter.VideosAdapter;import fence.mynews.ui.base.BaseFragment;/** * @author fence * @version 1.0.0 * @description * @date 5/12/16 */public class VideoFragment extends BaseFragment        implements PullToRefreshBase.OnRefreshListener2<ListView> {    private static final String VIDEOS = "videos";    private static final String CHANNEL = "channel";    private static final String START_TIME = "start_time";    private PullToRefreshListView mNewsListPtrlv;    private Channel mChannel;    private ArrayList<VideoResp.VideoListEntity> mVideos;    private VideosAdapter mAdapter;    private long mStartTime;    private TextView mTipsTv;    public static VideoFragment newInstance(ArrayList<VideoResp.VideoListEntity> videos) {        VideoFragment fragment = new VideoFragment();        Bundle args = new Bundle();        args.putSerializable(VIDEOS, videos);        fragment.setArguments(args);        return fragment;    }    @Override    protected int getLayoutResId() {        return R.layout.fragment_video;    }    @Override    public void onSaveInstanceState(Bundle outState) {        super.onSaveInstanceState(outState);        if (outState != null) {            outState.putSerializable(VIDEOS, mVideos);            outState.putLong(START_TIME, mStartTime);        }    }    @Override    protected void initVariables(@Nullable Bundle savedInstanceState) {        if (savedInstanceState != null) {            mVideos = (ArrayList<VideoResp.VideoListEntity>) savedInstanceState.getSerializable(VIDEOS);            mChannel = savedInstanceState.getParcelable(CHANNEL);            mStartTime = savedInstanceState.getLong(START_TIME);        } else {            mVideos = new ArrayList<>();            mChannel = getArguments().getParcelable(CHANNEL);            mStartTime = System.currentTimeMillis();        }        mAdapter = new VideosAdapter(getActivity(), mVideos);    }    @Override    protected void findViews(View view) {        mNewsListPtrlv = (PullToRefreshListView) view.findViewById(R.id.news_ptrlv_newslist);        mTipsTv = (TextView) view.findViewById(R.id.news_tv_tips);    }    @Override    protected void setViews() {        mNewsListPtrlv.setAdapter(mAdapter);        mNewsListPtrlv.setOnRefreshListener(this);    }    @Override    protected void loadData() {        timedRefreshing();    }    @Override    protected void lazyLoading() {        timedRefreshing();    }    private void timedRefreshing() {        if (isVisibleToUser && isViewInited) {            if (mVideos.size() == 0) {                mNewsListPtrlv.setRefreshing(true);            } else {                long during = System.currentTimeMillis() - mStartTime;                // 每隔 10s 刷新一次                if (during > 10 * 1000) {                    Toast.makeText(getActivity(), "out of time", Toast.LENGTH_SHORT).show();                    mNewsListPtrlv.setRefreshing(true);                }            }        }    }    @Override    protected void onInvisibleToUser() {        if (!isVisibleToUser && isViewInited) {            mNewsListPtrlv.onRefreshComplete();            mStartTime = System.currentTimeMillis();        }    }    @Override    public void onPullDownToRefresh(PullToRefreshBase<ListView> refreshView) {        new Thread() {            @Override            public void run() {                try {                    Thread.sleep(1000);                    mHandler.sendEmptyMessage(0);                } catch (InterruptedException e) {                    e.printStackTrace();                }            }        }.start();    }    @Override    public void onPullUpToRefresh(PullToRefreshBase<ListView> refreshView) {        new Thread() {            @Override            public void run() {                try {                    Thread.sleep(1000);                    mHandler.sendEmptyMessage(1);                } catch (InterruptedException e) {                    e.printStackTrace();                }            }        }.start();    }    private Handler mHandler = new Handler(new Handler.Callback() {        @Override        public boolean handleMessage(Message msg) {            return true;        }    });    private void showTips(final String tips) {        mTipsTv.setVisibility(View.VISIBLE);        mTipsTv.setText(tips);        mTipsTv.postDelayed(new Runnable() {            @Override            public void run() {                mTipsTv.setVisibility(View.GONE);            }        }, 2000);    }}